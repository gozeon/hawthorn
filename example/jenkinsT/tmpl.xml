<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.29">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.60">
    <script>node {

    try {
        stage(&apos;git&apos;) {
            git branch: &apos;GIT_BRANCH&apos;, url: &apos;GIT_URL&apos;
        }

        docker.image(&apos;DOCKER_IMAGE&apos;).inside {
            withEnv([
                &apos;npm_config_cache=npm-cache&apos;,
                &apos;HOME=.&apos;,
            ]) {
                stage(&apos;install&apos;) {
                    sh &apos;npm install --registry=NPM_REGISTRY&apos;
                }

                stage(&apos;build&apos;) {
                    sh &apos;npm run build&apos;
                }
            }
        }

        stage(&apos;test advance scriot&apos;) {
            echo &quot;current build number: ${currentBuild.number}&quot;
            echo &quot;current build number: ${currentBuild.result}&quot;
            sh &quot;git rev-parse HEAD&quot;
        }

        stage(&apos;tar&apos;) {
            sh &apos;tar -zcvf `git rev-parse HEAD`.tar.gz dist&apos;
            sh &quot;curl -F \&quot;uploadfile=@`git rev-parse HEAD`.tar.gz\&quot; http://100.73.37.4:8081/api/files/upload&quot;
            sh &apos;ls&apos;
        }

        stage(&apos;curl&apos;) {
            sh &quot;curl --header \&quot;Content-Type: application/json\&quot; --request POST --data &apos;{\&quot;title\&quot;: ${currentBuild.number},\&quot;author\&quot;:\&quot;xyz\&quot;}&apos; http://100.66.130.244:3100/posts&quot;
        }
    }

    catch (exc) {
        sh &quot;curl --header \&quot;Content-Type: application/json\&quot; --request POST --data &apos;{\&quot;title\&quot;:\&quot;${currentBuild.number}\&quot;,\&quot;author\&quot;:\&quot;${exc}\&quot;}&apos; http://100.66.130.244:3100/posts&quot;
        currentBuild.result = &quot;FAILURE&quot;
    }

    finally {
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
